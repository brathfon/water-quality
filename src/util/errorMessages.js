var createSimpleErrorMsg = function(title, level) {
  var errorMsg = {};
  errorMsg['title'] = title;
  errorMsg['level'] = level;
  errorMsg['text'] = [];
  return errorMsg;
};

var handleHttpErrors = function(error) {
  var errorMsgText;
  var errorMsgObj;
  var i;
  if (error.response) {
    // The request was made and the server responded with a status code
    // that falls out of the range of 2xx
    errorMsgText = '';
    // is error is known, generated by API. 500 level are sql errors and
    // could come with an array of errors, but usually only one.
    if ((error.response.status === 500) && (error.response.data.errors)) {
      for (i = 0; i < error.response.data.errors.length; ++i) {
        this.$store.commit('systemErrors/addError', error.response.data.errors[i], {
          root: true
        });
      }
    } else if ((error.response.status === 400) && (error.response.data.message)) {
      errorMsgText += error.response.data.message;
      errorMsgObj = createSimpleErrorMsg(errorMsgText, "Danger");
      this.$store.commit('systemErrors/addError', errorMsgObj, {
        root: true
      });
    } else { // not known from the API
      errorMsgText += "Error";
      if (error.response.status) {
        errorMsgText += " status = " + error.response.status;
      }
      if (error.response.statusText) {
        errorMsgText += " " + error.response.statusText;
      }
      errorMsgObj = createSimpleErrorMsg(errorMsgText, "Danger");
      this.$store.commit('systemErrors/addError', errorMsgObj, {
        root: true
      });
    }
  } else if (error.request) {
    // The request was made but no response was received
    // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
    // http.ClientRequest in node.js
    errorMsgObj = createSimpleErrorMsg("The request was made but no response was received", "Danger");
    this.$store.commit('systemErrors/addError', errorMsgObj, {
      root: true
    });
  } else {
    // Something happened in setting up the request that triggered an Error
    console.log('error.message', error.message);
    errorMsgObj = createSimpleErrorMsg("An error was thrown and caught handling API request", "Danger");
    this.$store.commit('systemErrors/addError', errorMsgObj, {
      root: true
    });

  }

};

export {
  createSimpleErrorMsg,
  handleHttpErrors
};
