import axios from 'axios';
import Vue from 'vue';
import Vuex from 'vuex';
Vue.use(Vuex);

var errorMsgs = require('../util/errorMessages');


export default new Vuex.Store({
  state: {
    // authentication
    firstName : '',
    lastName : '',
    workerID : -1,
    roles : [],
    hasAdministrationRole : false,
    hasDataEntryRole : false,
    hasDataVerificationRole : false,
    hasQualityAssuranceRole : false,
    hasReadOnlyRole : false,
    isLoggedIn : false,
    // lookup information,
    lookupInformationErrors : [],
    labs : []
  },
  mutations : {
    // ************** Authorization mutations *****************
    updateFirstName(state, newFirstName) {
      state.firstName = newFirstName;
    },
    updateLastName(state, newLastName) {
      state.lastName = newLastName;
    },
    updateRoles(state, newRoles) {
      state.roles = newRoles;
    },
    updateWorkerID (state, newWorkerID) {
      state.workerID = newWorkerID;
    },
    updateHasAdministrationRole (state, status) {
      state.hasAdministrationRole = status;
    },
    updateHasDataEntryRole (state, status) {
      state.hasDataEntryRole = status;
    },
    updateHasDataVerificationRole (state, status) {
      state.hasDataVerificationRole = status;
    },
    updateHasQualityAssuranceRole (state, status) {
      state.hasQualityAssuranceRole = status;
    },
    updateHasReadOnlyRole (state, status) {
      state.hasReadOnlyRole = status;
    },
    updateIsLoggedIn (state, status) {
      state.isLoggedIn = status;
    },
    // Lookup information
    pushlookupInformationErrors(state, error){
       state.lookupInformationErrors.push(error);
    },
    updateLabs (state, status) {
      state.labs = status;
    }

  },
  actions : {
    // ************** Authorization actions *****************
    resetAuth(context) {
      context.commit('updateWorkerID',  -1);
      context.commit('updateFirstName', '');
      context.commit('updateLastName',  '');
      context.commit('updateRoles',     []);
      context.commit('updateHasAdministrationRole', false);
      context.commit('updateHasDataEntryRole', false);
      context.commit('updateHasDataVerificationRole', false);
      context.commit('updateHasQualityAssuranceRole', false);
      context.commit('updateHasReadOnlyRole', false);
      context.commit('updateIsLoggedIn', false);
    },
    getLabs(context) {
      var errorMsgText;
      var errorMsgObj;
      var msg = {
        method: 'get',
        url: '/api/getLabs',
        data: {}
      }

      axios(msg)
        .then((response) => {
          //console.log("RESPONSE ", response.data.labs);
          context.commit('updateLabs', response.data.labs);
        })
        .catch((error) => {
            if (error.response) {
             // The request was made and the server responded with a status code
             // that falls out of the range of 2xx
             errorMsgText = '';
             // is error is known, generated by API
             if ((error.response.status === 400) && (error.response.data.message)) {
                 errorMsgText += error.response.data.message;
             }
            else {  // not known from the API
               errorMsgText += "Error";
               if (error.response.status) {
                 errorMsgText += " status = " + error.response.status;
               }
               if (error.response.statusText) {
                 errorMsgText += " " + error.response.statusText;
               }
             }
             errorMsgObj = errorMsgs.createSimpleErrorMsg(errorMsgText, "Danger");
             context.commit('pushlookupInformationErrors', errorMsgObj);


              } else if (error.request) {
             // The request was made but no response was received
             // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
             // http.ClientRequest in node.js
             //console.log('error.request', error.request);
             errorMsgObj = errorMsgs.createSimpleErrorMsg("The request was made but no response was received", "Danger")
             context.commit('pushlookupInformationErrors', errorMsgObj);

            } else {
             // Something happened in setting up the request that triggered an Error
             console.log('error.message', error.message);
             errorMsgObj = errorMsgs.createSimpleErrorMsg("An error was thrown and caught handling API request", "Danger");
             context.commit('pushlookupInformationErrors', errorMsgObj);

            }
        });
    }
  }
});
