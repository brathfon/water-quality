var util  = require('util');
var fs    = require('fs');
var path  = require('path');

/* this small library supplies a function that reads site information dumped from the mySQL database.
The file can be generated by the following steps.
In a fully functional water-quality development environment:
  cd development/water-quality/water-quality-master/
  source .env
  mysql -u $DB_USER -p$DB_USER_PASSWORD $DB_DATABASE --table -e "SELECT * FROM sites;" > sites.txt

The contents should look like:

+---------+---------+-------------+-----------------------------+--------+--------------------+------------------------+-----------+-----------+-------------+--------+-------------+
| site_id | hui_abv | storet_code | long_name                   | lab_id | default_sample_day | default_sampling_order | geo_order | lat       | lon         | active | description |
+---------+---------+-------------+-----------------------------+--------+--------------------+------------------------+-----------+-----------+-------------+--------+-------------+
|       1 | RNS     | 000723      | Napili                      |      1 |                  1 |                      1 |      NULL | 20.994222 | -156.667417 |      1 | NULL        |
|       2 | RPO     | 000724      | Pohaku                      |      1 |                  1 |                      2 |      NULL | 20.967083 |  -156.68139 |      1 | NULL        |
|       3 | RKS     | NULL        | Kaanapali Shores            |      1 |                  1 |                      3 |      NULL | 20.949331 | -156.691124 |      1 | NULL        |
.
.
.

The full path to this file is supplied to the readSiteFile() function of this library and it returns site information in a hash
with the key being the site code (ex: RNS) and the contents being site information such as latitude and longitude.

siteCode : RNS
{ site_id: '1',
  hui_abv: 'RNS',
  storet_code: '000723',
  long_name: 'Napili',
  lab_id: '1',
  default_sample_day: '1',
  default_sampling_order: '1',
  geo_order: 'NULL',
  lat: '20.994222',
  lon: '-156.667417',
  active: '1',
  description: 'NULL' }
siteCode : RPO
{ site_id: '2',
  hui_abv: 'RPO',
  .
  .
  .
*/

var parseSiteFile = function(siteFile) {

  // attribute will the be hui site id like "RNS" and value will be a object of key values of site information
  var sites = {};
  var lines;

  var contents = fs.readFileSync(siteFile, 'utf8')
  //console.log("contents: " + contents);
  lines = contents.split("\n");

  // The first few lines of the site file are header, so start on the 4th line
  //
  // +---------+---------+-------------+-----------------------------+--------+--------------------+- .....
  // | site_id | hui_abv | storet_code | long_name                   | lab_id | default_sample_day |  .....
  // +---------+---------+-------------+-----------------------------+--------+--------------------+- .....
  //
  // For some reason the "split("\n") creates a blank last line and the final visible line is as below, so don't
  // do the final last two iterations.
  // +---------+---------+-------------+-----------------------------+--------+------------- ...
  for (let i = 3; i < lines.length - 2; ++i) 
  {
      const line = lines[i];
      //console.log("line: " + line);

      const pieces = line.split("|");

      //console.log("line " + i + " line length " + pieces.length);
      //for (let j = 0; j < pieces.length; ++j) { console.log(j + "\t" + pieces[j]); }

      if (pieces.length >= 14) {
        //console.log("line: " + line);
        obj = {};
        obj['site_id']                = pieces[1].trim();  // number from MySQL
        obj['hui_abv']                = pieces[2].trim();  // ex: RNS
        obj['storet_code']            = pieces[3].trim();  // ex: 00723
        obj['long_name']              = pieces[4].trim();  // ex: Napili
        obj['lab_id']                 = pieces[5].trim();  // number from mysql
        obj['default_sample_day']     = pieces[6].trim();  // from mysql
        obj['default_sampling_order'] = pieces[7].trim();  // from mysql
        obj['geo_order']              = pieces[8].trim();  // from mysql, may want to keep
        obj['lat']                    = pieces[9].trim();  // ex: 20.994222
        obj['lon']                    = pieces[10].trim(); // ex: -156.667417
        obj['active']                 = pieces[11].trim(); // 1 yes, 0 no
        obj['description']            = pieces[12].trim(); // a text description of the location

        // create a key-value pair of the hui_abv and the site data for easy of lookup
        sites[obj.hui_abv] = obj;
      }
      else {
        console.log("ERROR: unexpected number of column: " + pieces.length + ". Expecting 14 or more. Line: " + line);
      }
    };

  //console.log("sites " + util.inspect(sites, false, null));
  return sites;
};


var readSiteFile = function(siteFile) {

  return parseSiteFile(siteFile);

}


exports.readSiteFile = readSiteFile;
//exports.getLab = getLab;
